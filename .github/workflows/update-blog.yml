name: 📝 写新文章

on:
  issues:
    types: [opened, edited, labeled, unlabeled, deleted]
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  update-blog:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'blog-post') || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install marked package
        run: npm install marked
          
      - name: Create Blog Post
        run: |
          mkdir -p .scripts
          cat > .scripts/update-blog.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          const marked = require('marked');
          
          // 获取所有文章
          function getAllPosts() {
            const postsDir = 'posts';
            if (!fs.existsSync(postsDir)) {
              fs.mkdirSync(postsDir);
              return [];
            }
            
            return fs.readdirSync(postsDir)
              .filter(file => file.endsWith('.html'))
              .map(file => {
                const content = fs.readFileSync(path.join(postsDir, file), 'utf8');
                const titleMatch = content.match(/<h1>(.*?)<\/h1>/);
                const dateMatch = content.match(/<div class="post-date">(.*?)<\/div>/);
                const excerptMatch = content.match(/<div class="post-content">([\s\S]*?)<\/div>/);
                
                return {
                  file,
                  title: titleMatch ? titleMatch[1] : '无标题',
                  date: dateMatch ? dateMatch[1] : '未知日期',
                  excerpt: excerptMatch ? excerptMatch[1].split('\n')[0].substring(0, 200) : '',
                  isPinned: content.includes('class="post pinned"')
                };
              })
              .sort((a, b) => {
                if (a.isPinned !== b.isPinned) return a.isPinned ? -1 : 1;
                return new Date(b.date) - new Date(a.date);
              });
          }
          
          // 创建新文章
          function createNewPost() {
            const now = new Date();
            const dateStr = now.toLocaleDateString('zh-CN');
            const timeStr = now.toLocaleTimeString('zh-CN');
            
            const title = \`\${dateStr} 记录\`;
            const body = \`今天是 \${dateStr}，现在是 \${timeStr}。

## 今日心情
写下你的心情...

## 今日计划
- [ ] 计划 1
- [ ] 计划 2
- [ ] 计划 3

## 今日总结
今天过得怎么样？\`;
            
            const fileName = dateStr.replace(/\//g, '') + '-记录.html';
            const htmlContent = marked.parse(body);
            
            const postContent = \`<!DOCTYPE html>
            <html lang="zh-CN">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>\${title} - 我的博客</title>
                <style>
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                        line-height: 1.6;
                        margin: 0;
                        padding: 20px;
                        max-width: 800px;
                        margin: 0 auto;
                        color: #333;
                        background-color: #f8f9fa;
                    }
                    article {
                        background-color: white;
                        padding: 40px;
                        border-radius: 8px;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                    header {
                        text-align: center;
                        margin-bottom: 30px;
                    }
                    header h1 {
                        margin: 0;
                        color: #2c3e50;
                    }
                    .post-date {
                        color: #666;
                        font-size: 0.9em;
                        margin-top: 10px;
                    }
                    .post-content {
                        margin-top: 30px;
                        line-height: 1.8;
                    }
                    .post-content h2 {
                        color: #2c3e50;
                        margin-top: 40px;
                    }
                    .post-content h3 {
                        color: #34495e;
                        margin-top: 30px;
                    }
                    .post-content p {
                        margin: 20px 0;
                    }
                    .post-content img {
                        max-width: 100%;
                        height: auto;
                        border-radius: 4px;
                        margin: 20px 0;
                    }
                    .post-content pre {
                        background: #f6f8fa;
                        padding: 16px;
                        border-radius: 6px;
                        overflow-x: auto;
                        font-size: 14px;
                        line-height: 1.45;
                    }
                    .post-content code {
                        background: #f6f8fa;
                        padding: 2px 4px;
                        border-radius: 3px;
                        font-size: 0.9em;
                        color: #e83e8c;
                    }
                    .post-content pre code {
                        color: #333;
                        padding: 0;
                        background: none;
                    }
                    .post-content blockquote {
                        margin: 20px 0;
                        padding: 0 20px;
                        border-left: 4px solid #42b983;
                        color: #666;
                    }
                    .post-content input[type="checkbox"] {
                        margin-right: 8px;
                    }
                    .back-link {
                        display: inline-block;
                        margin-top: 40px;
                        color: #0366d6;
                        text-decoration: none;
                        font-weight: 500;
                    }
                    .back-link:hover {
                        text-decoration: underline;
                    }
                </style>
            </head>
            <body>
                <article>
                    <header>
                        <h1>\${title}</h1>
                        <div class="post-date">\${dateStr}</div>
                    </header>
            
                    <div class="post-content">
                        \${htmlContent}
                    </div>
            
                    <a href="../index.html" class="back-link">← 返回首页</a>
                </article>
            </body>
            </html>\`;
            
            if (!fs.existsSync('posts')) {
              fs.mkdirSync('posts');
            }
            fs.writeFileSync(path.join('posts', fileName), postContent);
            return fileName;
          }
          
          // 更新首页
          function updateIndex(posts) {
            let indexContent = fs.readFileSync('index.html', 'utf8');
            
            // 清除所有现有文章
            indexContent = indexContent.replace(/<article[\s\S]*?<\/article>/g, '');
            
            // 添加文章列表
            const postsHtml = posts.map(post => \`
                <article class="post\${post.isPinned ? ' pinned' : ''}">
                    <h2><a href="posts/\${post.file}" class="post-title">\${post.title}</a></h2>
                    <div class="post-date">\${post.date}</div>
                    <p class="post-excerpt">\${post.excerpt}</p>
                </article>\`).join('\n');
            
            // 如果没有文章，显示提示信息
            if (posts.length === 0) {
              indexContent = indexContent.replace(/<main>[\s\S]*?<\/main>/, \`
              <main>
                  <div class="no-posts">
                      还没有博客文章，点击下方按钮创建第一篇文章！
                  </div>
                  
                  <div class="create-post">
                      <a href="https://github.com/ikdxhz/blog/actions/workflows/update-blog.yml" target="_blank">
                          ✍️ 写新文章
                      </a>
                  </div>
              </main>\`);
            } else {
              indexContent = indexContent.replace(/<main>[\s\S]*?<\/main>/, \`
              <main>
                  \${postsHtml}
                  
                  <div class="create-post">
                      <a href="https://github.com/ikdxhz/blog/actions/workflows/update-blog.yml" target="_blank">
                          ✍️ 写新文章
                      </a>
                  </div>
              </main>\`);
            }
            
            fs.writeFileSync('index.html', indexContent);
          }
          
          // 主逻辑
          if (process.env.GITHUB_EVENT_NAME === 'workflow_dispatch') {
            // 创建新文章
            const newFileName = createNewPost();
            console.log(\`新文章已创建: \${newFileName}\`);
          }
          
          // 重新整理所有文章
          const posts = getAllPosts();
          updateIndex(posts);
          console.log(\`已更新 \${posts.length} 篇文章\`);
          EOL
          
          node .scripts/update-blog.js
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Blog update: $(date '+%Y-%m-%d')" || echo "No changes to commit"
          git push 
